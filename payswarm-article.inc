<?php

/**
 * Adds the required stylesheets for the PaySwarm plugin.
 *
 * @package payswarm
 * @since 1.0
 */
function payswarm_add_stylesheets()
{
   $css_url = PAYSWARM_PLUGIN_URL . 'payswarm.css';

   wp_register_style('payswarm-style', $css_url);
   wp_enqueue_style( 'payswarm-style');
}

/**
 * JSON-encodes (with unescaped slashes) the given data.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $data The native PHP data which will be converted to JSON by
 *    json_encode().
 *
 * @return The encoded JSON data.
 */
function payswarm_json_encode($data)
{
   // Newer PHP has a flag to avoid escaped '/'
   if(defined('JSON_UNESCAPED_SLASHES'))
   {
      $json = json_encode($data, JSON_UNESCAPED_SLASHES);
   }
   else
   {
      // Use a simple string replacement of '\/' to '/'.
      // FIXME: does this need to be more complex?
      $json = str_replace('\\/', '/', json_encode($data));
   }

   return $json;
}

/**
 * Generates a hash of the JSON encoded data.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $data The native PHP data which will be converted to JSON by
 *    json_encode().
 *
 * @return The SHA-1 hash of the encoded JSON data.
 */
function payswarm_generate_json_hash($data)
{
   // SHA-1 hash JSON
   $json = payswarm_json_encode($data);
   return sha1($json);
}

/**
 * Signs JSON encoded data.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $data The native PHP data which will be converted to JSON by
 *    json_encode().
 * @param string $private_key the private key to sign with.
 *
 * @return The base64-encoded signature of the encoded JSON data.
 */
function payswarm_sign_json($data, $private_key)
{
   // sign and return base64-encoded signature
   $json = payswarm_json_encode($data);
   openssl_sign($json, $signature, $private_key, OPENSSL_ALGO_SHA1);
   return base64_encode($signature);
}

/**
 * Generates an asset associative array given all of the parameters that
 * belong in the asset description.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 * @param boolean $includeSignature true to include the signature.
 *
 * @return array the asset associative array.
 */
function payswarm_generate_asset_object($info, $includeSignature)
{
   // create the normalized JSON-LD
   // NOTE: The keys must be in sorted order.

   $asset = array
   (
      '<http://purl.org/dc/terms/creator>' => array
      (
         '<http://xmlns.com/foaf/0.1/name>' => $info['post_author']
      ),
      '<http://purl.org/dc/terms/title>' =>
         $info['post_title'],
      '<http://purl.org/payswarm#assetProvider>' =>
         '<' . $info['asset_provider'] . '>',
      '<http://purl.org/payswarm#authority>' =>
         '<' .  $info['payswarm_authority'] . '>',
      '<http://purl.org/payswarm#contentUrl>' =>
         '<' .  $info['post_url'] . '>',
      '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' => array
      (
         '<http://purl.org/payswarm#Asset>',
         '<http://purl.org/payswarm#WebPage>'
      ),
      '@' => '<' . $info['asset_url'] . '>'
   );

   if($includeSignature)
   {
      $asset += array
      (
         '<http://purl.org/signature#signature>' => array
         (
            '<http://purl.org/dc/terms/created>' =>
               $info['asset_signature_created'] .
               '^^<http://www.w3.org/2001/XMLSchema#dateTime>',
            '<http://purl.org/dc/terms/creator>' =>
               '<' . $info['public_key_url'] . '>',
            '<http://purl.org/signature#signatureValue>' =>
               $info['asset_signature'],
            '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' =>
               '<http://purl.org/signature#JsonldSignature>'
         )
      );
   }

   // sort asset by key
   ksort($asset);
   return $asset;
}

/**
 * Generates an asset hash given all of the parameters that belong in the
 * asset description.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 */
function payswarm_generate_asset_hash($info)
{
   $asset = payswarm_generate_asset_object($info, true);
   return payswarm_generate_json_hash($asset);
}

/**
 * Generates a listing associative array given all of the parameters that
 * belong in the listing description.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 * @param boolean $includeSignature true to include the signature.
 *
 * @return array the listing associative array.
 */
function payswarm_generate_listing_object($info, $includeSignature)
{
   // create the normalized JSON-LD
   // NOTE: The keys must be in sorted order.

   $listing = array
   (
      '<http://purl.org/commerce#payee>' =>
         '<' . $info['listing_payee']['id'] . '>',
      '<http://purl.org/commerce#payeeRule>' => array
      (
         '<http://purl.org/commerce#destinationOwnerType>' =>
            '<http://purl.org/payswarm#Authority>',
         '<http://purl.org/commerce#maximumRate>' =>
            $info['payswarm_auth_rate'],
         '<http://purl.org/commerce#rateContext>' => array(
            '<http://purl.org/commerce#Inclusive>',
            '<http://purl.org/commerce#Tax>',
            '<http://purl.org/commerce#TaxExempt>'),
         '<http://purl.org/commerce#rateType>' =>
            '<http://purl.org/commerce#Percentage>',
         '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' =>
            '<http://purl.org/commerce#PayeeRule>',
      ),
      '<http://purl.org/payswarm#asset>' =>
         '<' . $info['asset_url'] . '>',
      '<http://purl.org/payswarm#assetHash>' =>
         $info['asset_hash'],
      '<http://purl.org/payswarm#license>' =>
         '<' . $info['license_url'] . '>',
      '<http://purl.org/payswarm#licenseHash>' =>
         $info['license_hash'],
      '<http://purl.org/payswarm#validFrom>' =>
         $info['listing_valid_from'] .
         '^^<http://www.w3.org/2001/XMLSchema#dateTime>',
      '<http://purl.org/payswarm#validUntil>' =>
         $info['listing_valid_until'] .
         '^^<http://www.w3.org/2001/XMLSchema#dateTime>',
      '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' => array
      (
         '<http://purl.org/goodrelations/v1#Offering>',
         '<http://purl.org/payswarm#Listing>'
      ),
      '@' => '<' . $info['listing_url'] . '>'
   );

   if($includeSignature)
   {
      $listing += array
      (
         '<http://purl.org/signature#signature>' => array
         (
            '<http://purl.org/dc/terms/created>' =>
               $info['listing_signature_created'] .
               '^^<http://www.w3.org/2001/XMLSchema#dateTime>',
            '<http://purl.org/dc/terms/creator>' =>
               '<' . $info['public_key_url'] . '>',
            '<http://purl.org/signature#signatureValue>' =>
               $info['listing_signature'],
            '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' =>
               '<http://purl.org/signature#JsonldSignature>'
         )
      );
   }

   // sort listing by key
   ksort($listing);

   return array
   (
      '@' => array(
         array
         (
            '<http://purl.org/commerce#currency>' =>
               $info['listing_payee']['com:currency'],
            '<http://purl.org/commerce#destination>' =>
               '<' . $info['listing_payee']['com:destination'] . '>',
            '<http://purl.org/commerce#payeePosition>' =>
               '0^^<http://www.w3.org/2001/XMLSchema#integer>',
            '<http://purl.org/commerce#rate>' =>
               $info['listing_payee']['com:rate'],
            '<http://purl.org/commerce#rateType>' =>
               '<' . $info['listing_payee']['com:rateType'] . '>',
            '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>' =>
               '<http://purl.org/commerce#Payee>',
            '<http://www.w3.org/2000/01/rdf-schema#comment>' =>
               $info['listing_payee']['rdfs:comment'],
            '@' => '<' . $info['listing_payee']['id'] . '>'
         ),
         $listing
      )
   );
}

/**
 * Generates a listing hash given all of the parameters that belong in the
 * listing description.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 */
function payswarm_generate_listing_hash($info)
{
   $listing = payswarm_generate_listing_object($info, true);
   return payswarm_generate_json_hash($listing);
}

/**
 * Returns true if "now" falls in the given validity period.
 *
 * @param string valid_from the start date.
 * @param string valid_until the end date.
 *
 * @return true if "now" is valid.
 */
function payswarm_check_validity_period($valid_from, $valid_until)
{
   $now = date_create();
   $start = date_create($valid_from);
   $end = date_create($valid_until);
   return ($now >= $start && $now <= $end);
}

/**
 * Generates an assoiative array with the PaySwarm related details of a post.
 *
 * The info will have the following keys:
 *    asset_url: The URL that uniquely identifies the asset.
 *    post_title: The title of the post.
 *    post_author The name of the author of the post.
 *    asset_provider The URL that uniquely identifies the entity
 *       that is providing the asset for sale.
 *    payswarm_authority The authority that should provide all
 *       transaction records.
 *    content_url The URL where the content resides for the asset.
 *    // FIXME: add the rest
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $post_id The post ID to operate on.
 * @param boolean resign True to resign the post info, false not to.
 *
 * @return array An associative array with PaySwarm related details of a post.
 */
function payswarm_get_post_info($post_id, $resign = false)
{
   $rval = array();

   // get post
   $post = get_post($post_id);

   // normalize post URL to http
   $rval['post_url'] =
      preg_replace("/^https/", "http", get_permalink($post_id));

   // basics
   $rval['post_title'] = $post->post_title;
   $rval['post_author'] = get_userdata($post->post_author)->display_name;
   $rval['asset_provider'] = get_option('payswarm_webid_url');
   $rval['payswarm_authority'] = get_option('payswarm_authority');

   // FIXME: The symbol needs to match the default currency
   $rval['currency_symbol'] = '$';

   // asset
   $rval['asset_url'] = $rval['post_url'] . '#asset';

   // license
   $rval['license_url'] =
      get_post_meta($post_id, 'payswarm_content_license_url', true);
   $rval['license_hash'] =
      get_post_meta($post_id, 'payswarm_content_license_hash', true);

   // listing
   $rval['listing_url'] = $rval['post_url'] . '#listing';
   $rval['listing_payee'] = array
   (
      'id' => $rval['post_url'] . '#listing-payee',
      // FIXME: 'payswarm_destination_account' needs to be implemented
      'com:currency' => strtoupper(get_option('payswarm_default_currency')),
      'com:destination' => get_option('payswarm_destination_account'),
      'com:rate' => get_post_meta($post_id, 'payswarm_price', true),
      'com:rateType' => 'http://purl.org/commerce#FlatAmount',
      'rdfs:comment' =>
         'Payment for ' . $rval['post_title'] . ' by ' . $rval['post_author'] .
         '.'
   );
   $rval['payswarm_auth_rate'] = get_post_meta(
      $post_id, 'payswarm_auth_rate', true);

   // public key identifier
   $rval['public_key_url'] = get_option('payswarm_public_key_url');

   // get existing validity dates
   $valid_from = get_post_meta($post_id, 'payswarm_listing_valid_from', true);
   $valid_until = get_post_meta($post_id, 'payswarm_listing_valid_until', true);
   $sig_created = get_post_meta($post_id, 'payswarm_signature_created', true);

   // resign if any of the dates are invalid or the validity period has passed
   if($valid_from === '' || $valid_until === '' || $sig_created === '' ||
      !payswarm_check_validity_period($valid_from, $valid_until))
   {
      $resign = true;
   }
   // resign if the signature was created before the global resign flag
   else if(!$resign)
   {
      $resign_if_before = get_option('payswarm_resign_if_before', true);
      if($resign_if_before !== '')
      {
         $created = date_create($sig_created);
         $resign_if_before = date_create($resign_if_before);
         if($created <= $resign_if_before)
         {
            $resign = true;
         }
      }
   }

   // resign if necessary
   if($resign)
   {
      // generate new validity period at start of the day
      $date = date_create('today');
      $next24 = clone $date;
      date_add($next24, date_interval_create_from_date_string('1 day'));
      $valid_from = date_format($date, DateTime::ISO8601);
      $valid_until = date_format($next24, DateTime::ISO8601);
      $sig_created = date_format($date, 'Y-m-d\TH:i:s\Z');
      $rval['listing_valid_from'] = $valid_from;
      $rval['listing_valid_until'] = $valid_until;

      // get private key for signing
      $private_key = get_option('payswarm_private_key');

      // generate new asset signature
      $asset_signature = payswarm_sign_asset($rval, $private_key);
      $rval['asset_signature'] = $asset_signature;
      $rval['asset_signature_created'] = $sig_created;

      // generate new asset hash
      $asset_hash = payswarm_generate_asset_hash($rval);
      $rval['asset_hash'] = $asset_hash;

      // generate new listing signature
      $listing_signature = payswarm_sign_listing($rval, $private_key);
      $rval['listing_signature'] = $listing_signature;
      $rval['listing_signature_created'] = $sig_created;

      // generate new listing hash
      $listing_hash = payswarm_generate_listing_hash($rval);
      $rval['listing_hash'] = $listing_hash;

      // update post meta data
      update_post_meta($post_id, 'payswarm_listing_valid_from', $valid_from);
      update_post_meta($post_id, 'payswarm_listing_valid_until', $valid_until);
      update_post_meta($post_id, 'payswarm_signature_created', $sig_created);
      update_post_meta($post_id, 'payswarm_asset_signature', $asset_signature);
      update_post_meta($post_id, 'payswarm_asset_hash', $asset_hash);
      update_post_meta(
         $post_id, 'payswarm_listing_signature', $listing_signature);
      update_post_meta($post_id, 'payswarm_listing_hash', $listing_hash);
   }
   // existing validity period valid
   else
   {
      // use cached values for validity, hashes, and signatures
      $rval['listing_valid_from'] = $valid_from;
      $rval['listing_valid_until'] = $valid_until;
      $rval['asset_signature'] =
         get_post_meta($post_id, 'payswarm_asset_signature', true);
      $rval['asset_signature_created'] = $sig_created;
      $rval['asset_hash'] =
         get_post_meta($post_id, 'payswarm_asset_hash', true);
      $rval['listing_signature'] =
         get_post_meta($post_id, 'payswarm_listing_signature', true);
      $rval['listing_signature_created'] = $sig_created;
      $rval['listing_hash'] =
         get_post_meta($post_id, 'payswarm_listing_hash', true);
   }

   return $rval;
}

/**
 * Signs an asset, given its information.
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 * @param string $private_key The private key to sign with.
 *
 * @return string The base64-encoded signature.
 */
function payswarm_sign_asset($info, $private_key)
{
   $asset = payswarm_generate_asset_object($info, false);
   return payswarm_sign_json($asset, $private_key);
}

/**
 * Signs a listing, given its information.
 *
 * @param array $info The post info as generated by payswarm_get_post_info().
 * @param string $private_key The private key to sign with.
 *
 * @return string The base64-encoded signature.
 */
function payswarm_sign_listing($info, $private_key)
{
   $listing = payswarm_generate_listing_object($info, false);
   return payswarm_sign_json($listing, $private_key);
}

/**
 * Generates the PaySwarm asset information HTML+RDFa markup, which can be
 * inserted into parts of the WordPress site.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $post_id The post ID that is being expressed.
 *
 * @return string The HTML markup, surrounded by a DIV element, that contains
 *         all of the necessary RDFa markup to express the asset information.
 */
function payswarm_asset_information_rdfa($post_id)
{
   $info = payswarm_get_post_info($post_id);

   // replace first 'http://' with 'https://'
   $access_url = preg_replace('/^http:\/\/(.*)$/', 'https://$1',
      PAYSWARM_PLUGIN_URL . 'payswarm-access.php');
   $access_url = add_query_arg('p', $post_id, $access_url);
   $pslogo_url = PAYSWARM_PLUGIN_URL . 'images/payswarm-20.png';

   // FIXME: This text chunk needs to be internationalized
   $rval = "
      <div xmlns:com=\"http://purl.org/commerce#\"
           xmlns:dc=\"http://purl.org/dc/terms/\"
           xmlns:foaf=\"http://xmlns.com/foaf/0.1/\"
           xmlns:gr=\"http://purl.org/goodrelations/v1#\"
           xmlns:ps=\"http://purl.org/payswarm#\"
           xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"
           xmlns:sig=\"http://purl.org/signature#\"
           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\"
           about=\"" . $info['asset_url'] . "\" typeof=\"ps:Asset ps:WebPage\"
           class=\"asset-info\">
         <div about=\"" . $info['post_url'] . "#listing\" typeof=\"ps:Listing gr:Offering\">
            <span rel=\"ps:asset\" resource=\"" . $info['asset_url'] . "\">" .
               __('View the full article for') . "</span>
            <span rel=\"com:payee\" resource=\"" . $info['listing_payee']['id'] . "\">
               <span property=\"com:currency\"  content=\"" . $info['listing_payee']['com:currency'] . "\">" .
                  $info['currency_symbol'] . "</span>
               <abbr property=\"com:rate\" title=\"" .
                  $info['listing_payee']['com:rate'] .
                  "\" content=\"" .
                  $info['listing_payee']['com:rate'] .
                  "\">" . sprintf("%1.02f", $info['listing_payee']['com:rate']) .
               "</abbr>
            </span>
            <span class=\"view-more\"
            onclick=\"javascript:toggleAssetInformation($post_id);\">
              [show offer details]</span>
         </div>
         <div id=\"payswarm-asset-info-$post_id\" class=\"hidden\">
            <a rel=\"ps:contentUrl\" href=\"" . $info['post_url'] . "\"
               property=\"dc:title\">" .
              htmlentities($info['post_title']) .
            "</a> by
            <span rel=\"dc:creator\">
               <span property=\"foaf:name\">" .
                  htmlentities($info['post_author']) .
               "</span>
            </span>.
            Offered by
            <a rel=\"ps:assetProvider\" href=\"" . $info['asset_provider'] . "\">us</a>
            via our
            <a rel=\"ps:authority\"
               href=\"" . $info['payswarm_authority'] . "\">PaySwarm provider</a>.
            <span about=\"" . $info['listing_url'] . "\">The offer to get access to this
            <span property=\"ps:assetHash\" content=\"" . $info['asset_hash'] . "\">post</span>
            under
            <a rel=\"ps:license\" href=\"" . $info['license_url'] . "\"
               property=\"ps:licenseHash\" content=\"" . $info['license_hash'] . "\"
              >this license</a>
            is valid from
            <abbr property=\"ps:validFrom\"
               title=\"" . $info['listing_valid_from'] . "\"
               content=\"" . $info['listing_valid_from'] . "\"
               datatype=\"xsd:dateTime\">today</abbr>
            until
            <abbr property=\"ps:validUntil\"
               title=\"" . $info['listing_valid_until'] . "\"
               content=\"" . $info['listing_valid_until'] . "\"
               datatype=\"xsd:dateTime\">tomorrow</abbr>.
            </span>
            <span rel=\"sig:signature\">
               <span typeof=\"sig:JsonldSignature\">
                  This <a href=\"" . $info['asset_url'] . "\">asset</a>
                  was <abbr property=\"sig:signatureValue\"
                  content=\"" . $info['asset_signature'] . "\" title=\"" . $info['asset_signature'] . "\">digitally signed</abbr>
                  using <a rel=\"dc:creator\" href=\"" . $info['public_key_url'] . "\">this key</a>
                  at <span property=\"dc:created\" datatype=\"xsd:dateTime\">" . $info['asset_signature_created'] . "</span>.
               </span>
            </span>
            <span about=\"" . $info['post_url'] . "#listing\">
              <span rel=\"com:payeeRule\">
                 <span typeof=\"com:PayeeRule\">
                    <span rel=\"com:destinationOwnerType\" resource=\"http://purl.org/payswarm#Authority\"></span>
                    <span rel=\"com:rateType\" resource=\"http://purl.org/commerce#Percentage\"></span>
                    <span rel=\"com:rateContext\" resource=\"http://purl.org/commerce#Inclusive\"></span>
                    <span rel=\"com:rateContext\" resource=\"http://purl.org/commerce#Tax\"></span>
                    <span rel=\"com:rateContext\" resource=\"http://purl.org/commerce#TaxExempt\"></span>
                    <span property=\"com:maximumRate\" content=\"" . $info['payswarm_auth_rate'] . "\"></span>
                 </span>
              </span>
              <span rel=\"sig:signature\">
                 <span typeof=\"sig:JsonldSignature\">
                    This <a href=\"" . $info['post_url'] . "#listing\">listing</a> was
                    <abbr property=\"sig:signatureValue\"
                    content=\"" . $info['listing_signature'] . "\" title=\"" . $info['listing_signature'] . "\">digitally signed</abbr>
                    using <a rel=\"dc:creator\" href=\"" . $info['public_key_url'] . "\">this key</a>
                    at <span property=\"dc:created\" datatype=\"xsd:dateTime\">" . $info['listing_signature_created'] . "</span>.
                 </span>
              </span>
            </span>
            <span about=\"" . $info['listing_payee']['id'] . "\" typeof=\"com:Payee\">
               <span property=\"com:payeePosition\" datatype=\"xsd:integer\" content=\"0\"></span>
               <a rel=\"com:rateType\" href=\"" . $info['listing_payee']['com:rateType'] . "\"
               >Flat-rate payment</a>
               will be deposited into
               <a rel=\"com:destination\"
               href=\"" . $info['listing_payee']['com:destination'] . "\">this account</a>.
               The memo field for the payment will read:
               \"<span property=\"rdfs:comment\">" .
                  htmlentities($info['listing_payee']['rdfs:comment']) .
               "</span>\"
            </span>
         </div>
         <div class=\"row\">
            <form action=\"$access_url\" method=\"post\">
            <div>
               <button class=\"purchase-button\">
                  <img alt=\"". __('Access') ."\" src=\"$pslogo_url\" />" .
                  __('Access') . "</button>
            </div>
            </form>
         </div>
      </div>";

   return $rval;
}

/**
 * Filters out either paid or alternate text from an article.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $content The article content to filter.
 * @param string $paid True to filter out paid content, false to filter out
 *                  alternate text.
 *
 * @return string The filtered article.
 */
function payswarm_filter_content($content, $paid)
{
   $rval = '';

   // setup start and end tags for filtering
   $start = $paid ? '<!--payswarm-->' : '<!--payswarm-alternate-->';
   $start_len = strlen($start);
   $end = $paid ? '<!--payswarm-alternate-->' : '<!--payswarm-->';

   $pos = 0;
   do
   {
      // find start of content to remove
      $tmp = strpos($content, $start, $pos);

      // nothing to filter, add all content
      if($tmp === false)
      {
         $rval .= substr($content, $pos);
      }
      // filter out content
      else
      {
         // add all content up to start of content to filter out
         $rval .= substr($content, $pos, ($tmp - $pos));

         // find end of content to filter out
         $tmp = strpos($content, $end, $tmp + $start_len);
      }
      $pos = $tmp;
   }
   while($pos !== false);

   // remove special tags from content
   $rval = str_replace('<!--payswarm-->', '', $rval);
   $rval = str_replace('<!--payswarm-alternate-->', '', $rval);

   return $rval;
}

/**
 * Filters the for-profit content for posts.
 *
 * This filter is applied based on the value of the session and PaySwarm
 * Payment Token. If the visitor has not been cleared to view an article, only
 * the free content is displayed. If the visitor has paid for the content,
 * the proper article content is shown. This is a filter that is applied to
 * the 'the_content' WordPress filter.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param string $content The article content as it is stored in the database.
 * @return string The filtered article content after it has been modified by
 *    this filter.
 */
function payswarm_filter_paid_content($content)
{
   global $post;

   // check to see if the article has been purchased already
   $purchased = false;
   $post_id = $post->ID;
   $session = payswarm_get_session();
   $ptoken = payswarm_database_get_token($session, 'payswarm-payment');
   if($ptoken !== NULL)
   {
      $purchased = payswarm_database_is_post_authorized($ptoken, $post_id);
   }

   // remove any spurious paragraph and break tags
   $content = str_replace(
      '<p><!--payswarm--></p>',
      '<!--payswarm-->', $content);
   $content = str_replace(
      '<p><!--payswarm--><br />',
      '<!--payswarm-->', $content);
   $content = str_replace(
      '<p><!--payswarm-alternate--></p>',
      '<!--payswarm-alternate-->', $content);
   $content = str_replace(
      '<p><!--payswarm-alternate--><br />',
      '<!--payswarm-alternate-->', $content);

   // if the article has not been purchased and there is for-pay content
   if(!$purchased && preg_match('/<!--payswarm-->.+/ms', $content))
   {
      // remove all for-pay content
      $processed_content = payswarm_filter_content($content, true);

      // if a price is available, add purchase UI
      $amount = get_post_meta($post_id, 'payswarm_price', true);
      if($amount !== '')
      {
         $processed_content .=
            '<div class="purchase section">' .
            '<div class="money row">' .
            payswarm_asset_information_rdfa($post_id) .
            '</div></div>';
      }
      // no purchase price available
      else
      {
         // tell the visitor that the article cannot be purchased
         $pslogo_url = PAYSWARM_PLUGIN_URL . 'images/payswarm-20.png';
         $processed_content .=
            '<div class="purchase section">' .
            '<div class="money row">' .
            '<span class="label">' .
               __('The author has not set the price for the paid content.') .
            '</span><button class="purchase-button">' .
            '<img alt="' . __('Cannot Purchase') .'" src="' . $pslogo_url .
            '" />' . __('Cannot Purchase') . '</button>' .
            '</div></div>';
      }
   }
   // article has been purchased or there is no for-pay content
   else
   {
      // remove alternate content that only displays when visitor hasn't paid
      $processed_content = payswarm_filter_content($content, false);
   }

   return $processed_content;
}

/**
 * Adds the PaySwarm payment information metabox to a post editor box.
 *
 * @package payswarm
 * @since 1.0
 */
function payswarm_add_meta_boxes()
{
   add_meta_box('payswarm_sectionid', __( 'PaySwarm Options'),
                'payswarm_create_meta_box', 'post', 'side', 0);
}

/**
 * Generates the HTML for a PaySwarm post metadata editing box.
 *
 * Echoes the price for a PaySwarm post metadata editing box.
 *
 * @package payswarm
 * @since 1.0
 */
function payswarm_create_meta_box()
{
   // nonce is required for to prevent forgery attacks
   $plugin = plugin_basename(__FILE__);
   wp_nonce_field($plugin . '_save_meta', '_payswarm_save_meta_nonce');

   // FIXME: Get the currency symbol from the database
   global $post;
   $price = get_post_meta($post->ID, 'payswarm_price', true);
   $auth_rate = get_post_meta($post->ID, 'payswarm_auth_rate', true);
   $currency_symbol = "$";

   // dump the HTML contents
   echo '<div><strong><label for="payswarm_price_field">' .
      __("Price") .
      ' </label></strong>';
   echo $currency_symbol;
   echo '<input type="text" id="payswarm_price_field" ' .
      'name="payswarm_price" value="'. $price . '" size="6" />' .
      '<span>The price to charge for access to the non-free content.</span>' .
      '</div>';
   echo '<div><strong><label for="payswarm_auth_rate_field">' .
      __("Authority Percentage") .
      ' </label></strong>';
   echo '%';
   echo '<input type="text" id="payswarm_auth_rate_field" ' .
      'name="payswarm_auth_rate" value="'. $auth_rate . '" size="6" />' .
      '<span>The percentage to permit the PaySwarm authority to charge.</span>';
   echo '</div>';
   echo '<div><strong><label for="payswarm_content_license_url_field">' .
      __("Content License") .
      ' </label></strong>';
   echo '<select id="payswarm_content_license_url_field" ' .
      'name="payswarm_content_license_url">' .
      '      <option value="' . get_option('payswarm_default_license_url') .
      '">' . get_option('payswarm_default_license_url') . '</option>' .
      '</select>' .
      '<input type="hidden" name="payswarm_content_license_hash" ' .
      'value="' . get_option('payswarm_default_license_hash') . '"/>' .
      '<span>The license to associate with the content when it is sold.' .
      '</span></div>';
}

/**
 * Saves the PaySwarm-specific meta-data that is associated with a post.
 *
 * This method is called whenever a save is done for a post. It saves all of
 * the information that is specified in the PaySwarm options box for the post.
 *
 * This method may be called multiple times per save. Once for revision save,
 * once for autosave, and once for normal save. We only update our meta data
 * on the normal save.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param integer $post_id The post identifier as recorded in the WordPress
 *    database tables.
 *
 * @return integer The post identifier as recorded in the WordPress database
 *    tables.
 */
function payswarm_save_post_data($post_id)
{
   // determine type of save and check edit permission
   $autosave = wp_is_post_autosave($post_id);
   $revision = wp_is_post_revision($post_id);
   $edit_allowed = current_user_can('edit_post', $post_id);

   // only update on non-auto and non-revision save
   if(!$autosave && !$revision && $edit_allowed)
   {
      // ensure POST nonce is valid
      $valid_nonce = false;
      if(isset($_POST['_payswarm_save_meta_nonce']))
      {
         $plugin = plugin_basename(__FILE__);
         $valid_nonce = wp_verify_nonce(
            $_POST['_payswarm_save_meta_nonce'], $plugin . '_save_meta');
      }

      /* Note: If the nonce is not valid, then use the existing data from the
         post. The nonce will be missing (and thus, invalid) when "Quick Edit"
         or xmlrpc were used to save the post data. */
      if($valid_nonce)
      {
         $price = $_POST['payswarm_price'];
         $auth_rate = $_POST['payswarm_auth_rate'];
         $license = $_POST['payswarm_content_license_url'];
         $hash = $_POST['payswarm_content_license_hash'];
      }
      // invalid nonce, get existing post data
      else
      {
         $price = get_post_meta($post_id, 'payswarm_price', true);
         $auth_rate = get_post_meta($post_id, 'payswarm_auth_rate', true);
         $license = get_post_meta(
            $post_id, 'payswarm_content_license_url', true);
         $hash = get_post_meta($post_id, 'payswarm_content_license_hash', true);
      }

      // validate and update post meta data
      payswarm_update_post_meta($post_id, 'payswarm_price', $price);
      payswarm_update_post_meta($post_id, 'payswarm_auth_rate', $auth_rate);
      payswarm_update_post_meta(
         $post_id, 'payswarm_content_license_url', $license);
      payswarm_update_post_meta(
         $post_id, 'payswarm_content_license_hash', $hash);

      // force resigning of post info
      payswarm_get_post_info($post_id, true);
   }

   return $post_id;
}

/**
 * Validates PaySwarm-specific post metadata before storing it to the database.
 *
 * If the given data is invalid, reasonable defaults are used in place of the
 * invalid data provided. Anyone calling this method must ensure that the
 * payswarm_get_post_info() method is called after this method in order to
 * ensure that all PaySwarm-related digital signatures are updated.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param integer $post_id The post identifier that is associated with the
 *    metadata.
 * @param string $meta_key The metadata key to update.
 * @param string $meta_value The metadata value to use for the update.
 */
function payswarm_update_post_meta($post_id, $meta_key, $meta_value)
{
   // ensure the price is valid, if not use the default and update
   if($meta_key === 'payswarm_price')
   {
      $price = $meta_value;
      if(!is_numeric($price) || floatval($price) < 0)
      {
         $price = get_option('payswarm_default_price');
         $price = sprintf('%1.07f', floatval($price));
         update_post_meta($post_id, 'payswarm_price', $price);
      }
   }
   // ensure the auth rate is valid, if not use the default and update
   else if($meta_key === 'payswarm_auth_rate')
   {
      $auth_rate = $meta_value;
      if(!is_numeric($auth_rate) || floatval($auth_rate) < 0)
      {
         $auth_rate = get_option('payswarm_default_auth_rate');
         $auth_rate = sprintf('%1.07f', floatval($auth_rate));
         update_post_meta($post_id, 'payswarm_auth_rate', $auth_rate);
      }
   }
   // ensure the license URL is valid, if not use the default and update
   else if($meta_key === 'payswarm_content_license_url')
   {
      $license = $meta_value;
      if($license === '')
      {
         $license = get_option('payswarm_default_license_url');
         $hash = get_option('payswarm_default_license_hash');
         update_post_meta(
            $post_id, 'payswarm_content_license_url', $license);
         update_post_meta(
            $post_id, 'payswarm_content_license_hash', $hash);
      }
   }
   // ensure the license hash is valid, if not use the default and update
   else if($meta_key === 'payswarm_content_license_hash')
   {
      $hash = $meta_value;
      if($hash === '')
      {
         $license = get_option('payswarm_default_license_url');
         $hash = get_option('payswarm_default_license_hash');
         update_post_meta(
            $post_id, 'payswarm_content_license_url', $license);
         update_post_meta(
            $post_id, 'payswarm_content_license_hash', $hash);
      }
   }
}

/**
 * This action hook is called whenever post metadata is added to a post.
 *
 * The PaySwarm-specific code is run in order to prevent duplicate metadata
 * in the database as well as to validate the metadata before it is written
 * to the database.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param integer $meta_id The metadata identifier in the postmeta WordPress
 *    database.
 */
function payswarm_added_postmeta($meta_id)
{
   $meta = get_post_meta_by_id($meta_id);
   $revision = wp_is_post_revision($meta->post_id);

   // do not perform the signature update/checks if the post is a revision
   // or if the metadata is not PaySwarm metadata
   if(!$revision && (strpos($meta->meta_key, 'payswarm_') === 0))
   {
      // delete any older meta_id from the database for any PaySwarm metadata
      payswarm_database_remove_old_metadata(
         $meta->post_id, $meta_id, $meta->meta_key);

      // ensure the following data is validated before being saved
      if($meta->meta_key === 'payswarm_price' ||
         $meta->meta_key === 'payswarm_auth_rate' ||
         $meta->meta_key === 'payswarm_content_license_url' ||
         $meta->meta_key === 'payswarm_content_license_hash')
      {
         payswarm_update_post_meta(
            $meta->post_id, $meta->meta_id, $meta->meta_value);
      }
      else
      {
         // update other non-validation-required PaySwarm metadata
         update_post_meta($meta->post_id, $meta->meta_id, $meta->meta_value);
      }

      // force a new signature for the post info
      payswarm_get_post_info($meta->post_id, true);
   }
}

/**
 * This action hook is called whenever post metadata is updated for a post.
 *
 * The PaySwarm-specific code validates the metadata before it is written
 * to the database, or uses reasonable defaults if invalid data is provided.
 *
 * @package payswarm
 * @since 1.0
 *
 * @param integer $meta_id The metadata identifier in the postmeta WordPress
 *    database.
 */
function payswarm_updated_postmeta($meta_id)
{
   $meta = get_post_meta_by_id($meta_id);
   $revision = wp_is_post_revision($meta->post_id);

   // do not perform the signature update/checks if the post is a revision
   // or if the metadata is not PaySwarm metadata
   if(!$revision && (strpos($meta->meta_key, 'payswarm_') === 0))
   {
      // ensure the following data is validated before being saved
      if($meta->meta_key === 'payswarm_price' ||
         $meta->meta_key === 'payswarm_auth_rate' ||
         $meta->meta_key === 'payswarm_content_license_url' ||
         $meta->meta_key === 'payswarm_content_license_hash')
      {
         payswarm_update_post_meta(
            $meta->post_id, $meta->meta_id, $meta->meta_value);
      }

      // force a new signature for the post info
      payswarm_get_post_info($meta->post_id, true);
   }
}

?>
